// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MatchType match type
//
// swagger:model MatchType
type MatchType string

func NewMatchType(value MatchType) *MatchType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MatchType.
func (m MatchType) Pointer() *MatchType {
	return &m
}

const (

	// MatchTypeSTRINGEQUAL captures enum value "STRING_EQUAL"
	MatchTypeSTRINGEQUAL MatchType = "STRING_EQUAL"

	// MatchTypeSTRINGNOTEQUAL captures enum value "STRING_NOT_EQUAL"
	MatchTypeSTRINGNOTEQUAL MatchType = "STRING_NOT_EQUAL"
)

// for schema
var matchTypeEnum []interface{}

func init() {
	var res []MatchType
	if err := json.Unmarshal([]byte(`["STRING_EQUAL","STRING_NOT_EQUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		matchTypeEnum = append(matchTypeEnum, v)
	}
}

func (m MatchType) validateMatchTypeEnum(path, location string, value MatchType) error {
	if err := validate.EnumCase(path, location, value, matchTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this match type
func (m MatchType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMatchTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this match type based on context it is used
func (m MatchType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
