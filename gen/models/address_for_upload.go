// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressForUpload Address of the object in NeoFS.
// Example: {"container_id":"5HZTn5qkRnmgSz9gSrw22CEdPPk6nQhkwf2Mgzyvkikv","object_id":"8N3o7Dtr6T1xteCt6eRwhpmJ7JhME58Hyu1dvaswuTDd"}
//
// swagger:model AddressForUpload
type AddressForUpload struct {

	// container id
	// Required: true
	ContainerID *string `json:"container_id"`

	// object id
	// Required: true
	ObjectID *string `json:"object_id"`
}

// Validate validates this address for upload
func (m *AddressForUpload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressForUpload) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("container_id", "body", m.ContainerID); err != nil {
		return err
	}

	return nil
}

func (m *AddressForUpload) validateObjectID(formats strfmt.Registry) error {

	if err := validate.Required("object_id", "body", m.ObjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address for upload based on context it is used
func (m *AddressForUpload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddressForUpload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressForUpload) UnmarshalBinary(b []byte) error {
	var res AddressForUpload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
