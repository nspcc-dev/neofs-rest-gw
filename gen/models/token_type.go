// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TokenType Type of token.
//
// swagger:model TokenType
type TokenType string

func NewTokenType(value TokenType) *TokenType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TokenType.
func (m TokenType) Pointer() *TokenType {
	return &m
}

const (

	// TokenTypeObject captures enum value "object"
	TokenTypeObject TokenType = "object"

	// TokenTypeContainer captures enum value "container"
	TokenTypeContainer TokenType = "container"
)

// for schema
var tokenTypeEnum []interface{}

func init() {
	var res []TokenType
	if err := json.Unmarshal([]byte(`["object","container"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tokenTypeEnum = append(tokenTypeEnum, v)
	}
}

func (m TokenType) validateTokenTypeEnum(path, location string, value TokenType) error {
	if err := validate.EnumCase(path, location, value, tokenTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this token type
func (m TokenType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTokenTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this token type based on context it is used
func (m TokenType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
