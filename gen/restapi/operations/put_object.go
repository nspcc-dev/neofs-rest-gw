// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/nspcc-dev/neofs-rest-gw/gen/models"
)

// PutObjectHandlerFunc turns a function with the right signature into a put object handler
type PutObjectHandlerFunc func(PutObjectParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PutObjectHandlerFunc) Handle(params PutObjectParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PutObjectHandler interface for that can handle valid put object params
type PutObjectHandler interface {
	Handle(PutObjectParams, *models.Principal) middleware.Responder
}

// NewPutObject creates a new http.Handler for the put object operation
func NewPutObject(ctx *middleware.Context, handler PutObjectHandler) *PutObject {
	return &PutObject{Context: ctx, Handler: handler}
}

/* PutObject swagger:route PUT /objects putObject

Upload object to NeoFS

*/
type PutObject struct {
	Context *middleware.Context
	Handler PutObjectHandler
}

func (o *PutObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutObjectParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutObjectBody put object body
// Example: {"containerId":"5HZTn5qkRnmgSz9gSrw22CEdPPk6nQhkwf2Mgzyvkikv","fileName":"myFile.txt","payload":"Y29udGVudCBvZiBmaWxl"}
//
// swagger:model PutObjectBody
type PutObjectBody struct {

	// container Id
	// Required: true
	ContainerID *string `json:"containerId"`

	// file name
	// Required: true
	FileName *string `json:"fileName"`

	// payload
	Payload string `json:"payload,omitempty"`
}

// Validate validates this put object body
func (o *PutObjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutObjectBody) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("object"+"."+"containerId", "body", o.ContainerID); err != nil {
		return err
	}

	return nil
}

func (o *PutObjectBody) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("object"+"."+"fileName", "body", o.FileName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put object body based on context it is used
func (o *PutObjectBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutObjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutObjectBody) UnmarshalBinary(b []byte) error {
	var res PutObjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
