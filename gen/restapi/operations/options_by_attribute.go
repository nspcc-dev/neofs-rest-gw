// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// OptionsByAttributeHandlerFunc turns a function with the right signature into a options by attribute handler
type OptionsByAttributeHandlerFunc func(OptionsByAttributeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OptionsByAttributeHandlerFunc) Handle(params OptionsByAttributeParams) middleware.Responder {
	return fn(params)
}

// OptionsByAttributeHandler interface for that can handle valid options by attribute params
type OptionsByAttributeHandler interface {
	Handle(OptionsByAttributeParams) middleware.Responder
}

// NewOptionsByAttribute creates a new http.Handler for the options by attribute operation
func NewOptionsByAttribute(ctx *middleware.Context, handler OptionsByAttributeHandler) *OptionsByAttribute {
	return &OptionsByAttribute{Context: ctx, Handler: handler}
}

/* OptionsByAttribute swagger:route OPTIONS /get_by_attribute/{containerId}/{attrKey}/{attrVal} optionsByAttribute

OptionsByAttribute options by attribute API

*/
type OptionsByAttribute struct {
	Context *middleware.Context
	Handler OptionsByAttributeHandler
}

func (o *OptionsByAttribute) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewOptionsByAttributeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
