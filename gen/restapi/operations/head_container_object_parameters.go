// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHeadContainerObjectParams creates a new HeadContainerObjectParams object
//
// There are no default values defined in the spec.
func NewHeadContainerObjectParams() HeadContainerObjectParams {

	return HeadContainerObjectParams{}
}

// HeadContainerObjectParams contains all the bound params for the head container object operation
// typically these are obtained from a http.Request
//
// swagger:parameters headContainerObject
type HeadContainerObjectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Base58 encoded container id.
	  Required: true
	  In: path
	*/
	ContainerID string
	/*Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	  In: query
	*/
	Download *bool
	/*Base58 encoded object id.
	  Required: true
	  In: path
	*/
	ObjectID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewHeadContainerObjectParams() beforehand.
func (o *HeadContainerObjectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rContainerID, rhkContainerID, _ := route.Params.GetOK("containerId")
	if err := o.bindContainerID(rContainerID, rhkContainerID, route.Formats); err != nil {
		res = append(res, err)
	}

	qDownload, qhkDownload, _ := qs.GetOK("download")
	if err := o.bindDownload(qDownload, qhkDownload, route.Formats); err != nil {
		res = append(res, err)
	}

	rObjectID, rhkObjectID, _ := route.Params.GetOK("objectId")
	if err := o.bindObjectID(rObjectID, rhkObjectID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindContainerID binds and validates parameter ContainerID from path.
func (o *HeadContainerObjectParams) bindContainerID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ContainerID = raw

	return nil
}

// bindDownload binds and validates parameter Download from query.
func (o *HeadContainerObjectParams) bindDownload(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("download", "query", "bool", raw)
	}
	o.Download = &value

	return nil
}

// bindObjectID binds and validates parameter ObjectID from path.
func (o *HeadContainerObjectParams) bindObjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ObjectID = raw

	return nil
}
