// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// OptionsAuthBearerHandlerFunc turns a function with the right signature into a options auth bearer handler
type OptionsAuthBearerHandlerFunc func(OptionsAuthBearerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OptionsAuthBearerHandlerFunc) Handle(params OptionsAuthBearerParams) middleware.Responder {
	return fn(params)
}

// OptionsAuthBearerHandler interface for that can handle valid options auth bearer params
type OptionsAuthBearerHandler interface {
	Handle(OptionsAuthBearerParams) middleware.Responder
}

// NewOptionsAuthBearer creates a new http.Handler for the options auth bearer operation
func NewOptionsAuthBearer(ctx *middleware.Context, handler OptionsAuthBearerHandler) *OptionsAuthBearer {
	return &OptionsAuthBearer{Context: ctx, Handler: handler}
}

/* OptionsAuthBearer swagger:route OPTIONS /auth/bearer optionsAuthBearer

OptionsAuthBearer options auth bearer API

*/
type OptionsAuthBearer struct {
	Context *middleware.Context
	Handler OptionsAuthBearerHandler
}

func (o *OptionsAuthBearer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewOptionsAuthBearerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
