// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/nspcc-dev/neofs-rest-gw/gen/models"
)

// SearchObjectsHandlerFunc turns a function with the right signature into a search objects handler
type SearchObjectsHandlerFunc func(SearchObjectsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchObjectsHandlerFunc) Handle(params SearchObjectsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// SearchObjectsHandler interface for that can handle valid search objects params
type SearchObjectsHandler interface {
	Handle(SearchObjectsParams, *models.Principal) middleware.Responder
}

// NewSearchObjects creates a new http.Handler for the search objects operation
func NewSearchObjects(ctx *middleware.Context, handler SearchObjectsHandler) *SearchObjects {
	return &SearchObjects{Context: ctx, Handler: handler}
}

/* SearchObjects swagger:route POST /objects/{containerId}/search searchObjects

Search objects by filters

*/
type SearchObjects struct {
	Context *middleware.Context
	Handler SearchObjectsHandler
}

func (o *SearchObjects) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchObjectsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
