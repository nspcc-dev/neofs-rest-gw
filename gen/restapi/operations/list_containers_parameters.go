// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListContainersParams creates a new ListContainersParams object
// with the default values initialized.
func NewListContainersParams() ListContainersParams {

	var (
		// initialize parameters with default values

		limitDefault  = int64(100)
		offsetDefault = int64(0)
	)

	return ListContainersParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,
	}
}

// ListContainersParams contains all the bound params for the list containers operation
// typically these are obtained from a http.Request
//
// swagger:parameters listContainers
type ListContainersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The numbers of containers to return.
	  Maximum: 10000
	  Minimum: 1
	  In: query
	  Default: 100
	*/
	Limit *int64
	/*The number of containers to skip before starting to collect the result set.
	  Minimum: 0
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*Base58 encoded owner id
	  Required: true
	  In: query
	*/
	OwnerID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListContainersParams() beforehand.
func (o *ListContainersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qOwnerID, qhkOwnerID, _ := qs.GetOK("ownerId")
	if err := o.bindOwnerID(qOwnerID, qhkOwnerID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ListContainersParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListContainersParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *ListContainersParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", *o.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 10000, false); err != nil {
		return err
	}

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *ListContainersParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListContainersParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *ListContainersParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.MinimumInt("offset", "query", *o.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

// bindOwnerID binds and validates parameter OwnerID from query.
func (o *ListContainersParams) bindOwnerID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ownerId", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("ownerId", "query", raw); err != nil {
		return err
	}
	o.OwnerID = raw

	return nil
}
