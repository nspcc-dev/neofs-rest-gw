// Package apiserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apiserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	CookieAuthScopes = "CookieAuth.Scopes"
)

// Defines values for Action.
const (
	ALLOW Action = "ALLOW"
	DENY  Action = "DENY"
)

// Defines values for ErrorType.
const (
	API ErrorType = "API"
	GW  ErrorType = "GW"
)

// Defines values for HeaderType.
const (
	OBJECT  HeaderType = "OBJECT"
	REQUEST HeaderType = "REQUEST"
	SERVICE HeaderType = "SERVICE"
)

// Defines values for MatchType.
const (
	STRINGEQUAL    MatchType = "STRING_EQUAL"
	STRINGNOTEQUAL MatchType = "STRING_NOT_EQUAL"
)

// Defines values for Operation.
const (
	OperationDELETE    Operation = "DELETE"
	OperationGET       Operation = "GET"
	OperationHEAD      Operation = "HEAD"
	OperationPUT       Operation = "PUT"
	OperationRANGE     Operation = "RANGE"
	OperationRANGEHASH Operation = "RANGEHASH"
	OperationSEARCH    Operation = "SEARCH"
)

// Defines values for Role.
const (
	KEYS   Role = "KEYS"
	OTHERS Role = "OTHERS"
	SYSTEM Role = "SYSTEM"
	USER   Role = "USER"
)

// Defines values for SearchMatch.
const (
	MatchCommonPrefix   SearchMatch = "MatchCommonPrefix"
	MatchNotPresent     SearchMatch = "MatchNotPresent"
	MatchStringEqual    SearchMatch = "MatchStringEqual"
	MatchStringNotEqual SearchMatch = "MatchStringNotEqual"
)

// Defines values for TokenType.
const (
	Container TokenType = "container"
	Object    TokenType = "object"
)

// Defines values for Verb.
const (
	VerbDELETE  Verb = "DELETE"
	VerbPUT     Verb = "PUT"
	VerbSETEACL Verb = "SETEACL"
)

// Action Rule execution result action in NeoFS EACL. Either allows or denies access if the rule's filters match.
type Action string

// Address Address of the object in NeoFS.
type Address struct {
	ContainerId string `json:"containerId"`
	ObjectId    string `json:"objectId"`
}

// AddressForUpload Address of the object in NeoFS.
type AddressForUpload struct {
	ContainerId string `json:"container_id"`
	ObjectId    string `json:"object_id"`
}

// Attribute Attribute is a pair of strings that can be attached to a container or an object.
type Attribute struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Balance defines model for Balance.
type Balance struct {
	Address   string `json:"address"`
	Precision uint32 `json:"precision"`
	Value     string `json:"value"`
}

// Bearer Bearer token that is expected to be formed.
type Bearer struct {
	// Container Container session token rule.
	Container *Rule    `json:"container,omitempty"`
	Name      string   `json:"name,omitempty"`
	Object    []Record `json:"object"`
}

// BinaryBearer Bearer token for object operations that is represented in binary form.
type BinaryBearer struct {
	// Token Base64 encoded bearer token.
	Token string `json:"token"`
}

// ContainerInfo Information about container.
type ContainerInfo struct {
	Attributes []Attribute `json:"attributes"`
	BasicAcl   string      `json:"basicAcl"`

	// CannedAcl The friendly name for the basicAcl field.
	CannedAcl       *string `json:"cannedAcl,omitempty"`
	ContainerId     string  `json:"containerId"`
	ContainerName   string  `json:"containerName"`
	OwnerId         string  `json:"ownerId"`
	PlacementPolicy string  `json:"placementPolicy"`
	Version         string  `json:"version"`
}

// ContainerList List of containers info
type ContainerList struct {
	Containers []ContainerInfo `json:"containers"`
	Size       int             `json:"size"`
}

// ContainerPutInfo <p>Request body to create container. To specify container name use appropriate property (name provided in attributes will be ignored).<p>
// <p>To create a container you must provide <code>PlacementPolicy</code> and <code>BasicACL</code>.</p>
//
// <h5>Placement policy</h5>
// <p>Placement policy allows you control where and how the container (and its object) is stored. For example, you want to store 3 copies of every object, so you can use the following policy:</p>
// <pre><code>REP 3</code></pre>
// <p><a href="https://github.com/nspcc-dev/neofs-spec/blob/master/01-arch/02-policy.md">More about policy</a>.</p>
//
// <h5>Basic ACL</h5>
// <p>Basic ACL is a part of the container structure, and it is always created simultaneously with the container. Therefore, it is never subject to any changes. It is a 32-bit integer with a bit field in the following format:</p>
// <p><img src="https://raw.githubusercontent.com/nspcc-dev/neofs-spec/046e623dc2d8134ab2b85fcaf831077d574561a2/01-arch/pic/acl-basic-private.svg" alt="ACL Basic"></p>
//
// <table>
//
//	<thead>
//	    <tr>
//	        <th>Symbol</th>
//	        <th>Meaning</th>
//	        <th>Description</th>
//	    </tr>
//	</thead>
//	<tbody>
//	    <tr>
//	        <td>B</td>
//	        <td>Bearer</td>
//	        <td>Allows using Bear Token ACL rules to replace eACL rules</td>
//	    </tr>
//	    <tr>
//	        <td>U</td>
//	        <td>User</td>
//	        <td>The owner of the container identified by the public key linked to the container</td>
//	    </tr>
//	    <tr>
//	        <td>S</td>
//	        <td>System</td>
//	        <td>Inner Ring and/or container nodes in the current version of network map. IR nodes can only perform <code>GetRangeHash</code>, <code>Head</code>, and <code>Search</code> necessary for data audit. Container nodes can only do things required for the replication.</td>
//	    </tr>
//	    <tr>
//	        <td>O</td>
//	        <td>Others</td>
//	        <td>Clients that do not match any of the categories above</td>
//	    </tr>
//	    <tr>
//	        <td>F</td>
//	        <td>Final</td>
//	        <td>Flag denying Extended ACL. If set, Basic ACL check is final, Extended ACL is ignored</td>
//	    </tr>
//	    <tr>
//	        <td>X</td>
//	        <td>Sticky</td>
//	        <td>Flag denying different owners of the request and the object. If set, object in <code>Put</code> request must have one <code>Owner</code> and be signed with the same signature. If not set, the object must be correct but can be of any owner. The nodes falling for <code>SYSTEM</code> role are exceptions from this rule. For them, the bit is ignored.</td>
//	    </tr>
//	    <tr>
//	        <td>0</td>
//	        <td>Deny</td>
//	        <td>Denies operation of the identified category</td>
//	    </tr>
//	    <tr>
//	        <td>1</td>
//	        <td>Allow</td>
//	        <td>Allows operation of the identified category</td>
//	    </tr>
//	</tbody>
//
// </table>
// <p>To upload objects with a bearer token your container must have Bearer bits set. For example, you can use <code>0x0FBFBFFF</code> or predefined <code>eacl-public-read-write</code> values.</p>
// <p>Also, don't forget to set appropriate eACL to restrict your container.</p>
// <p><a href="https://github.com/nspcc-dev/neofs-spec/blob/master/01-arch/07-acl.md">More about ACL</a>.</p>
type ContainerPutInfo struct {
	Attributes      []Attribute `json:"attributes,omitempty"`
	BasicAcl        string      `json:"basicAcl,omitempty"`
	ContainerName   string      `json:"containerName,omitempty"`
	PlacementPolicy string      `json:"placementPolicy,omitempty"`
}

// Eacl EACL NeoFS table.
type Eacl struct {
	ContainerId string   `json:"containerId"`
	Records     []Record `json:"records"`
}

// ErrorResponse <p>Error response.</p>
// <p>More about NeoFS status code you can find
//
//	<a href="https://github.com/nspcc-dev/neofs-spec/blob/master/20-api-v2/status.md">here</a>.</p>
type ErrorResponse struct {
	Code    uint32 `json:"code,omitempty"`
	Message string `json:"message"`

	// Type Error type. Allow determine source of the error.
	Type ErrorType `json:"type"`
}

// ErrorType Error type. Allow determine source of the error.
type ErrorType string

// Filter Filter in NeoFS EACL to check particular properties of the request or the object.
type Filter struct {
	// HeaderType Enumeration of possible sources of Headers to apply filters in NeoFS EACL.
	HeaderType HeaderType `json:"headerType"`
	Key        string     `json:"key"`

	// MatchType Match type in NeoFS EACL filter.
	MatchType MatchType `json:"matchType"`
	Value     string    `json:"value"`
}

// HeaderType Enumeration of possible sources of Headers to apply filters in NeoFS EACL.
type HeaderType string

// MatchType Match type in NeoFS EACL filter.
type MatchType string

// NetworkInfoOK Network information from NeoFS.
type NetworkInfoOK struct {
	AuditFee                   uint64 `json:"auditFee"`
	ContainerFee               uint64 `json:"containerFee"`
	EpochDuration              uint64 `json:"epochDuration"`
	HomomorphicHashingDisabled bool   `json:"homomorphicHashingDisabled"`
	MaxObjectSize              uint64 `json:"maxObjectSize"`
	NamedContainerFee          uint64 `json:"namedContainerFee"`
	StoragePrice               uint64 `json:"storagePrice"`
	WithdrawalFee              uint64 `json:"withdrawalFee"`
}

// ObjectBaseInfo Basic object information.
type ObjectBaseInfo struct {
	// Address Address of the object in NeoFS.
	Address  Address `json:"address"`
	FilePath *string `json:"filePath,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// ObjectInfo Object information.
type ObjectInfo struct {
	Attributes  []Attribute `json:"attributes"`
	ContainerId string      `json:"containerId"`
	ObjectId    string      `json:"objectId"`

	// ObjectSize Object full payload size
	ObjectSize uint64 `json:"objectSize"`
	OwnerId    string `json:"ownerId"`

	// Payload Base64 encoded object payload
	Payload *string `json:"payload,omitempty"`

	// PayloadSize Payload size in response
	PayloadSize int64 `json:"payloadSize"`
}

// ObjectList List of objects.
type ObjectList struct {
	Objects []ObjectBaseInfo `json:"objects"`
	Size    int              `json:"size"`
}

// ObjectUpload <p>Request body to create object.</p>
// <p>To create an object you must provide <code>containerId</code> and <code>fileName</code>.
// Additionally, you can provide <code>payload</code> (base64 encoded data) and <code>attributes</code>.</p>
//
// <p>Attribute is key-value data that is stored with the object. Key and value must be in UTF-8 format and must not be empty.</p>
//
// <p>Valid attribute:</p>
// <ul>
//
//	<li><code>MyAttribute: 'some value'</code></li>
//
// </ul>
//
// <p>Invalid attribute:</p>
// <ul>
//
//	<li><code>MyAttribute: ''</code></li>
//
// </ul>
//
// <p>Also, you can use this attribute to further object searching.</p>
type ObjectUpload struct {
	Attributes  []Attribute `json:"attributes,omitempty"`
	ContainerId string      `json:"containerId"`
	FileName    string      `json:"fileName"`
	Payload     *string     `json:"payload,omitempty"`
}

// Operation Request's operation type to match in NeoFS EACL if the rule is applicable to a particular request.
type Operation string

// PutContainerOK defines model for PutContainerOK.
type PutContainerOK struct {
	ContainerId string `json:"containerId"`
}

// Record A single NeoFS EACL rule.
type Record struct {
	// Action Rule execution result action in NeoFS EACL. Either allows or denies access if the rule's filters match.
	Action  Action   `json:"action"`
	Filters []Filter `json:"filters"`

	// Operation Request's operation type to match in NeoFS EACL if the rule is applicable to a particular request.
	Operation Operation `json:"operation"`
	Targets   []Target  `json:"targets"`
}

// Role Role for target in EACL.
type Role string

// Rule Container session token rule.
type Rule struct {
	ContainerId *string `json:"containerId,omitempty"`

	// Verb Verb that describes the allowed container operation for token.
	Verb Verb `json:"verb"`
}

// SearchFilter Search filter to find objects.
type SearchFilter struct {
	Key string `json:"key"`

	// Match Search match type.
	Match SearchMatch `json:"match"`
	Value string      `json:"value"`
}

// SearchFilters List of SearchFilter elements.
type SearchFilters struct {
	Filters []SearchFilter `json:"filters"`
}

// SearchMatch Search match type.
type SearchMatch string

// SuccessResponse Success response.
type SuccessResponse struct {
	Success bool `json:"success"`
}

// Target Target to apply the ACL rule. Can be a subject's role class or a list of public keys to match (KEYS role).
type Target struct {
	Keys []string `json:"keys"`

	// Role Role for target in EACL.
	Role Role `json:"role"`
}

// TokenResponse Base64 encoded marshaled token (for container or for object operations).
type TokenResponse struct {
	Name  *string `json:"name,omitempty"`
	Token string  `json:"token"`

	// Type Type of token.
	Type TokenType `json:"type"`
}

// TokenType Type of token.
type TokenType string

// Verb Verb that describes the allowed container operation for token.
type Verb string

// AttrKey defines model for attrKey.
type AttrKey = string

// AttrVal defines model for attrVal.
type AttrVal = string

// ContainerId defines model for containerId.
type ContainerId = string

// ObjectId defines model for objectId.
type ObjectId = string

// Range defines model for range.
type Range = string

// SignatureKeyParam defines model for signatureKeyParam.
type SignatureKeyParam = string

// SignatureParam defines model for signatureParam.
type SignatureParam = string

// SignatureScheme defines model for signatureScheme.
type SignatureScheme = bool

// AuthJSONBody defines parameters for Auth.
type AuthJSONBody = []Bearer

// AuthParams defines parameters for Auth.
type AuthParams struct {
	// XBearerOwnerId Owner Id (wallet address) that will sign the token.
	XBearerOwnerId string `json:"X-Bearer-Owner-Id"`

	// XBearerLifetime Token lifetime in epoch.
	XBearerLifetime *int `json:"X-Bearer-Lifetime,omitempty"`

	// XBearerForAllUsers Form token for all users or only for this gate.
	XBearerForAllUsers *bool `json:"X-Bearer-For-All-Users,omitempty"`
}

// FormBinaryBearerParams defines parameters for FormBinaryBearer.
type FormBinaryBearerParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// ListContainersParams defines parameters for ListContainers.
type ListContainersParams struct {
	// OwnerId Base58 encoded owner id.
	OwnerId string `form:"ownerId" json:"ownerId"`

	// Offset The number of containers to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of containers to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutContainerParams defines parameters for PutContainer.
type PutContainerParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// NameScopeGlobal Provide this parameter to register container name in NNS service.
	NameScopeGlobal *bool `form:"name-scope-global,omitempty" json:"name-scope-global,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// DeleteContainerParams defines parameters for DeleteContainer.
type DeleteContainerParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// PutContainerEACLParams defines parameters for PutContainerEACL.
type PutContainerEACLParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// GetContainerObjectParams defines parameters for GetContainerObject.
type GetContainerObjectParams struct {
	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// HeadContainerObjectParams defines parameters for HeadContainerObject.
type HeadContainerObjectParams struct {
	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// GetByAttributeParams defines parameters for GetByAttribute.
type GetByAttributeParams struct {
	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// HeadByAttributeParams defines parameters for HeadByAttribute.
type HeadByAttributeParams struct {
	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// PutObjectParams defines parameters for PutObject.
type PutObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// NewOptionsUploadContainerObjectParams defines parameters for NewOptionsUploadContainerObject.
type NewOptionsUploadContainerObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// NewUploadContainerObjectParams defines parameters for NewUploadContainerObject.
type NewUploadContainerObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`

	// XAttributes All attributes are in a JSON-formatted map of key-value pairs, where the key is the
	// attribute name and the value is the attribute value.
	// You can also use the special attribute:
	// - `__NEOFS__EXPIRATION_EPOCH` - specifies the expiration epoch used by NeoFS.
	// This attribute should be used if you are familiar with the NeoFS epoch system.
	// More information can be found here: [NeoFS Specifications](https://github.com/nspcc-dev/neofs-spec/blob/master/01-arch/01-netmap.md).
	// Instead of this attribute you can use one of `X-Neofs-Expiration-*` headers below.
	XAttributes *string `json:"X-Attributes,omitempty"`

	// XNeofsExpirationRFC3339 Specifies the expiration time in RFC3339 format. Examples:
	// - "2024-12-31T23:59:59Z" represents the last moment of 2024 in UTC.
	// - "2024-12-31T15:59:59-08:00" represents 3:59 PM on December 31, 2024, Pacific Time.\
	// It will be rounded to the next epoch and used to set the `__NEOFS__EXPIRATION_EPOCH`
	// attribute of the created object.
	XNeofsExpirationRFC3339 *string `json:"X-Neofs-Expiration-RFC3339,omitempty"`

	// XNeofsExpirationTimestamp Specifies the exact timestamp of object expiration. It will be rounded to the next epoch and stored in the `__NEOFS__EXPIRATION_EPOCH` attribute of the created object.
	XNeofsExpirationTimestamp *string `json:"X-Neofs-Expiration-Timestamp,omitempty"`

	// XNeofsExpirationDuration Specifies the duration until object expiration in Go's duration format. Examples:
	// - "300s" represents 5 minutes.
	// - "2h45m" represents 2 hours and 45 minutes. \
	// It will be rounded to the next epoch and used to set the `__NEOFS__EXPIRATION_EPOCH` attribute of the created object.
	XNeofsExpirationDuration *string `json:"X-Neofs-Expiration-Duration,omitempty"`
}

// NewGetByAttributeParams defines parameters for NewGetByAttribute.
type NewGetByAttributeParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`

	// Range Request a specific range of bytes from the object.
	Range *Range `json:"Range,omitempty"`
}

// NewHeadByAttributeParams defines parameters for NewHeadByAttribute.
type NewHeadByAttributeParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// NewOptionsByAttributeParams defines parameters for NewOptionsByAttribute.
type NewOptionsByAttributeParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// NewGetContainerObjectParams defines parameters for NewGetContainerObject.
type NewGetContainerObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`

	// Range Request a specific range of bytes from the object.
	Range *Range `json:"Range,omitempty"`
}

// NewHeadContainerObjectParams defines parameters for NewHeadContainerObject.
type NewHeadContainerObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// NewOptionsContainerObjectParams defines parameters for NewOptionsContainerObject.
type NewOptionsContainerObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// SearchObjectsParams defines parameters for SearchObjects.
type SearchObjectsParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// Offset The number of containers to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of containers to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// DeleteObjectParams defines parameters for DeleteObject.
type DeleteObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// GetObjectInfoParams defines parameters for GetObjectInfo.
type GetObjectInfoParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// RangeOffset Range offset to start reading data.
	RangeOffset *int64 `form:"range-offset,omitempty" json:"range-offset,omitempty"`

	// RangeLength Length of data range.
	RangeLength *int64 `form:"range-length,omitempty" json:"range-length,omitempty"`

	// MaxPayloadSize Max payload size (in bytes) that can be included in the response.
	// If the actual size is greater than this params the payload won't be included in the response.
	MaxPayloadSize *int `form:"max-payload-size,omitempty" json:"max-payload-size,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// UploadContainerObjectMultipartBody defines parameters for UploadContainerObject.
type UploadContainerObjectMultipartBody struct {
	// Payload The file to upload.  If no file is present in this field, any other field name will be accepted, except for an empty one.
	Payload *openapi_types.File `json:"payload,omitempty"`
}

// UploadContainerObjectParams defines parameters for UploadContainerObject.
type UploadContainerObjectParams struct {
	// XAttributeFilename This attribute, in any combination of upper/lower case, will be added to the object as the `FileName` attribute. It will also be returned as the `FileName` attribute in GET/HEAD API calls for the object (/get/{containerId}/{objectId}) and the `name` in POST call search in a container (/objects/{containerId}/search).
	XAttributeFilename *string `json:"X-Attribute-Filename,omitempty"`

	// XAttributeFilepath This attribute, in any combination of upper/lower case, will be added to the object as the `FilePath` attribute. It will also be returned as the `FilePath` attribute in GET/HEAD API calls for the object (/get/{containerId}/{objectId}) or the `filePath` in POST call search in a container (/objects/{containerId}/search).
	XAttributeFilepath *string `json:"X-Attribute-Filepath,omitempty"`
}

// AuthJSONRequestBody defines body for Auth for application/json ContentType.
type AuthJSONRequestBody = AuthJSONBody

// PutObjectJSONRequestBody defines body for PutObject for application/json ContentType.
type PutObjectJSONRequestBody = ObjectUpload

// UploadContainerObjectMultipartRequestBody defines body for UploadContainerObject for multipart/form-data ContentType.
type UploadContainerObjectMultipartRequestBody UploadContainerObjectMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get balance in NeoFS
	// (GET /accounting/balance/{address})
	GetBalance(ctx echo.Context, address string) error

	// (OPTIONS /accounting/balance/{address})
	OptionsBalance(ctx echo.Context, address string) error

	// (OPTIONS /auth)
	OptionsAuth(ctx echo.Context) error
	// Form bearer token to further requests
	// (POST /auth)
	Auth(ctx echo.Context, params AuthParams) error
	// Form binary bearer token
	// (GET /auth/bearer)
	FormBinaryBearer(ctx echo.Context, params FormBinaryBearerParams) error

	// (OPTIONS /auth/bearer)
	OptionsAuthBearer(ctx echo.Context) error
	// Get list of containers
	// (GET /containers)
	ListContainers(ctx echo.Context, params ListContainersParams) error

	// (OPTIONS /containers)
	OptionsContainersPutList(ctx echo.Context) error
	// Create new container in NeoFS
	// (PUT /containers)
	PutContainer(ctx echo.Context, params PutContainerParams) error
	// Delete container by id
	// (DELETE /containers/{containerId})
	DeleteContainer(ctx echo.Context, containerId ContainerId, params DeleteContainerParams) error
	// Get container by id
	// (GET /containers/{containerId})
	GetContainer(ctx echo.Context, containerId ContainerId) error

	// (OPTIONS /containers/{containerId})
	OptionsContainersGetDelete(ctx echo.Context, containerId ContainerId) error
	// Get container EACL by id
	// (GET /containers/{containerId}/eacl)
	GetContainerEACL(ctx echo.Context, containerId ContainerId) error

	// (OPTIONS /containers/{containerId}/eacl)
	OptionsContainersEACL(ctx echo.Context, containerId ContainerId) error
	// Set container EACL by id
	// (PUT /containers/{containerId}/eacl)
	PutContainerEACL(ctx echo.Context, containerId ContainerId, params PutContainerEACLParams) error
	// Get object by container ID and object ID. Also returns custom users' header attributes `X-Attribute-*`. It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section. Please use `/objects/{containerId}/by_id/{objectId}` API.
	// (GET /get/{containerId}/{objectId})
	GetContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params GetContainerObjectParams) error
	// Get object info (head) by container ID and object ID. Also returns custom users' header attributes `X-Attribute-*`.
	// (HEAD /get/{containerId}/{objectId})
	HeadContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params HeadContainerObjectParams) error

	// (OPTIONS /get/{containerId}/{objectId})
	OptionsContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId) error
	// Find and get an object (payload and attributes) by a specific attribute. If more than one object is found, an arbitrary one will be returned. It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section. Please use `/objects/{containerId}/by_attribute/{attrKey}/{attrVal}` API.
	// (GET /get_by_attribute/{containerId}/{attrKey}/{attrVal})
	GetByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params GetByAttributeParams) error
	// Get object attributes by a specific attribute. If more than one object is found, an arbitrary one will be used to get attributes.
	// (HEAD /get_by_attribute/{containerId}/{attrKey}/{attrVal})
	HeadByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params HeadByAttributeParams) error

	// (OPTIONS /get_by_attribute/{containerId}/{attrKey}/{attrVal})
	OptionsByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal) error
	// Get network settings
	// (GET /network-info)
	GetNetworkInfo(ctx echo.Context) error

	// (OPTIONS /network-info)
	OptionsNetworkInfo(ctx echo.Context) error

	// (OPTIONS /objects)
	OptionsObjectsPut(ctx echo.Context) error
	// Upload object to NeoFS
	// (PUT /objects)
	PutObject(ctx echo.Context, params PutObjectParams) error

	// (OPTIONS /objects/{containerId})
	NewOptionsUploadContainerObject(ctx echo.Context, containerId ContainerId, params NewOptionsUploadContainerObjectParams) error
	// Upload object to NeoFS
	// (POST /objects/{containerId})
	NewUploadContainerObject(ctx echo.Context, containerId ContainerId, params NewUploadContainerObjectParams) error
	// Find and get an object (payload and attributes) by a specific attribute. If more than one object is found, an arbitrary one will be returned (use `/objects/{containerId}/search` API if this is not desired). It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section. Also, returns custom users' object attributes in header `X-Attributes`.
	// (GET /objects/{containerId}/by_attribute/{attrKey}/{attrVal})
	NewGetByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params NewGetByAttributeParams) error
	// Get object attributes by a specific attribute. If more than one object is found, an arbitrary one will be used to get attributes (use `/objects/{containerId}/search` API if this is not desired). Also, returns custom users' object attributes in header `X-Attributes`.
	// (HEAD /objects/{containerId}/by_attribute/{attrKey}/{attrVal})
	NewHeadByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params NewHeadByAttributeParams) error

	// (OPTIONS /objects/{containerId}/by_attribute/{attrKey}/{attrVal})
	NewOptionsByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params NewOptionsByAttributeParams) error
	// Get object by container ID and object ID. Also, returns custom users' object attributes in header `X-Attributes`. It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section.
	// (GET /objects/{containerId}/by_id/{objectId})
	NewGetContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params NewGetContainerObjectParams) error
	// Get object info (head) by container ID and object ID. Also, returns custom users' object attributes in header `X-Attributes`.
	// (HEAD /objects/{containerId}/by_id/{objectId})
	NewHeadContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params NewHeadContainerObjectParams) error

	// (OPTIONS /objects/{containerId}/by_id/{objectId})
	NewOptionsContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params NewOptionsContainerObjectParams) error

	// (OPTIONS /objects/{containerId}/search)
	OptionsObjectsSearch(ctx echo.Context, containerId string) error
	// Search objects by filters
	// (POST /objects/{containerId}/search)
	SearchObjects(ctx echo.Context, containerId ContainerId, params SearchObjectsParams) error
	// Remove object from NeoFS
	// (DELETE /objects/{containerId}/{objectId})
	DeleteObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params DeleteObjectParams) error
	// Get object info by address. Please use `/objects/{containerId}/by_id/{objectId}` API.
	// (GET /objects/{containerId}/{objectId})
	GetObjectInfo(ctx echo.Context, containerId ContainerId, objectId ObjectId, params GetObjectInfoParams) error

	// (OPTIONS /objects/{containerId}/{objectId})
	OptionsObjectsGetDelete(ctx echo.Context, containerId ContainerId, objectId ObjectId) error

	// (OPTIONS /upload/{containerId})
	OptionsUploadContainerObject(ctx echo.Context, containerId ContainerId) error
	// Upload object to NeoFS. Please use `/objects/{containerId}` API.
	// (POST /upload/{containerId})
	UploadContainerObject(ctx echo.Context, containerId ContainerId, params UploadContainerObjectParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBalance(ctx, address)
	return err
}

// OptionsBalance converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsBalance(ctx, address)
	return err
}

// OptionsAuth converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsAuth(ctx)
	return err
}

// Auth converts echo context to params.
func (w *ServerInterfaceWrapper) Auth(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bearer-Owner-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Owner-Id")]; found {
		var XBearerOwnerId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Owner-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Owner-Id", valueList[0], &XBearerOwnerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Owner-Id: %s", err))
		}

		params.XBearerOwnerId = XBearerOwnerId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bearer-Owner-Id is required, but not found"))
	}
	// ------------- Optional header parameter "X-Bearer-Lifetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Lifetime")]; found {
		var XBearerLifetime int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Lifetime, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Lifetime", valueList[0], &XBearerLifetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Lifetime: %s", err))
		}

		params.XBearerLifetime = &XBearerLifetime
	}
	// ------------- Optional header parameter "X-Bearer-For-All-Users" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-For-All-Users")]; found {
		var XBearerForAllUsers bool
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-For-All-Users, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-For-All-Users", valueList[0], &XBearerForAllUsers, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-For-All-Users: %s", err))
		}

		params.XBearerForAllUsers = &XBearerForAllUsers
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Auth(ctx, params)
	return err
}

// FormBinaryBearer converts echo context to params.
func (w *ServerInterfaceWrapper) FormBinaryBearer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FormBinaryBearerParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FormBinaryBearer(ctx, params)
	return err
}

// OptionsAuthBearer converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsAuthBearer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsAuthBearer(ctx)
	return err
}

// ListContainers converts echo context to params.
func (w *ServerInterfaceWrapper) ListContainers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListContainersParams
	// ------------- Required query parameter "ownerId" -------------

	err = runtime.BindQueryParameter("form", true, true, "ownerId", ctx.QueryParams(), &params.OwnerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ownerId: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListContainers(ctx, params)
	return err
}

// OptionsContainersPutList converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainersPutList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainersPutList(ctx)
	return err
}

// PutContainer converts echo context to params.
func (w *ServerInterfaceWrapper) PutContainer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutContainerParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "name-scope-global" -------------

	err = runtime.BindQueryParameter("form", true, false, "name-scope-global", ctx.QueryParams(), &params.NameScopeGlobal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name-scope-global: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutContainer(ctx, params)
	return err
}

// DeleteContainer converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteContainerParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContainer(ctx, containerId, params)
	return err
}

// GetContainer converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContainer(ctx, containerId)
	return err
}

// OptionsContainersGetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainersGetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainersGetDelete(ctx, containerId)
	return err
}

// GetContainerEACL converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerEACL(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContainerEACL(ctx, containerId)
	return err
}

// OptionsContainersEACL converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainersEACL(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainersEACL(ctx, containerId)
	return err
}

// PutContainerEACL converts echo context to params.
func (w *ServerInterfaceWrapper) PutContainerEACL(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutContainerEACLParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutContainerEACL(ctx, containerId, params)
	return err
}

// GetContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContainerObjectParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContainerObject(ctx, containerId, objectId, params)
	return err
}

// HeadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) HeadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HeadContainerObjectParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HeadContainerObject(ctx, containerId, objectId, params)
	return err
}

// OptionsContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainerObject(ctx, containerId, objectId)
	return err
}

// GetByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetByAttributeParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// HeadByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) HeadByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HeadByAttributeParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HeadByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// OptionsByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsByAttribute(ctx, containerId, attrKey, attrVal)
	return err
}

// GetNetworkInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworkInfo(ctx)
	return err
}

// OptionsNetworkInfo converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsNetworkInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsNetworkInfo(ctx)
	return err
}

// OptionsObjectsPut converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsObjectsPut(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsObjectsPut(ctx)
	return err
}

// PutObject converts echo context to params.
func (w *ServerInterfaceWrapper) PutObject(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObject(ctx, params)
	return err
}

// NewOptionsUploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewOptionsUploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params NewOptionsUploadContainerObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewOptionsUploadContainerObject(ctx, containerId, params)
	return err
}

// NewUploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewUploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewUploadContainerObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}
	// ------------- Optional header parameter "X-Attributes" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Attributes")]; found {
		var XAttributes string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Attributes, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Attributes", valueList[0], &XAttributes, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Attributes: %s", err))
		}

		params.XAttributes = &XAttributes
	}
	// ------------- Optional header parameter "X-Neofs-Expiration-RFC3339" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Neofs-Expiration-RFC3339")]; found {
		var XNeofsExpirationRFC3339 string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Neofs-Expiration-RFC3339, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Neofs-Expiration-RFC3339", valueList[0], &XNeofsExpirationRFC3339, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Neofs-Expiration-RFC3339: %s", err))
		}

		params.XNeofsExpirationRFC3339 = &XNeofsExpirationRFC3339
	}
	// ------------- Optional header parameter "X-Neofs-Expiration-Timestamp" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Neofs-Expiration-Timestamp")]; found {
		var XNeofsExpirationTimestamp string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Neofs-Expiration-Timestamp, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Neofs-Expiration-Timestamp", valueList[0], &XNeofsExpirationTimestamp, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Neofs-Expiration-Timestamp: %s", err))
		}

		params.XNeofsExpirationTimestamp = &XNeofsExpirationTimestamp
	}
	// ------------- Optional header parameter "X-Neofs-Expiration-Duration" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Neofs-Expiration-Duration")]; found {
		var XNeofsExpirationDuration string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Neofs-Expiration-Duration, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Neofs-Expiration-Duration", valueList[0], &XNeofsExpirationDuration, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Neofs-Expiration-Duration: %s", err))
		}

		params.XNeofsExpirationDuration = &XNeofsExpirationDuration
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewUploadContainerObject(ctx, containerId, params)
	return err
}

// NewGetByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) NewGetByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewGetByAttributeParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}
	// ------------- Optional header parameter "Range" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Range")]; found {
		var Range Range
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Range, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Range", valueList[0], &Range, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Range: %s", err))
		}

		params.Range = &Range
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewGetByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// NewHeadByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) NewHeadByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewHeadByAttributeParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewHeadByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// NewOptionsByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) NewOptionsByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params NewOptionsByAttributeParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewOptionsByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// NewGetContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewGetContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewGetContainerObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}
	// ------------- Optional header parameter "Range" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Range")]; found {
		var Range Range
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Range, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Range", valueList[0], &Range, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Range: %s", err))
		}

		params.Range = &Range
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewGetContainerObject(ctx, containerId, objectId, params)
	return err
}

// NewHeadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewHeadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewHeadContainerObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewHeadContainerObject(ctx, containerId, objectId, params)
	return err
}

// NewOptionsContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewOptionsContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params NewOptionsContainerObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewOptionsContainerObject(ctx, containerId, objectId, params)
	return err
}

// OptionsObjectsSearch converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsObjectsSearch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId string

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsObjectsSearch(ctx, containerId)
	return err
}

// SearchObjects converts echo context to params.
func (w *ServerInterfaceWrapper) SearchObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchObjectsParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchObjects(ctx, containerId, params)
	return err
}

// DeleteObject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteObject(ctx, containerId, objectId, params)
	return err
}

// GetObjectInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectInfoParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "range-offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "range-offset", ctx.QueryParams(), &params.RangeOffset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range-offset: %s", err))
	}

	// ------------- Optional query parameter "range-length" -------------

	err = runtime.BindQueryParameter("form", true, false, "range-length", ctx.QueryParams(), &params.RangeLength)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range-length: %s", err))
	}

	// ------------- Optional query parameter "max-payload-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-payload-size", ctx.QueryParams(), &params.MaxPayloadSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-payload-size: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectInfo(ctx, containerId, objectId, params)
	return err
}

// OptionsObjectsGetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsObjectsGetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsObjectsGetDelete(ctx, containerId, objectId)
	return err
}

// OptionsUploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsUploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsUploadContainerObject(ctx, containerId)
	return err
}

// UploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) UploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadContainerObjectParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Attribute-Filename" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Attribute-Filename")]; found {
		var XAttributeFilename string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Attribute-Filename, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Attribute-Filename", valueList[0], &XAttributeFilename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Attribute-Filename: %s", err))
		}

		params.XAttributeFilename = &XAttributeFilename
	}
	// ------------- Optional header parameter "X-Attribute-Filepath" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Attribute-Filepath")]; found {
		var XAttributeFilepath string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Attribute-Filepath, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Attribute-Filepath", valueList[0], &XAttributeFilepath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Attribute-Filepath: %s", err))
		}

		params.XAttributeFilepath = &XAttributeFilepath
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadContainerObject(ctx, containerId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounting/balance/:address", wrapper.GetBalance)
	router.OPTIONS(baseURL+"/accounting/balance/:address", wrapper.OptionsBalance)
	router.OPTIONS(baseURL+"/auth", wrapper.OptionsAuth)
	router.POST(baseURL+"/auth", wrapper.Auth)
	router.GET(baseURL+"/auth/bearer", wrapper.FormBinaryBearer)
	router.OPTIONS(baseURL+"/auth/bearer", wrapper.OptionsAuthBearer)
	router.GET(baseURL+"/containers", wrapper.ListContainers)
	router.OPTIONS(baseURL+"/containers", wrapper.OptionsContainersPutList)
	router.PUT(baseURL+"/containers", wrapper.PutContainer)
	router.DELETE(baseURL+"/containers/:containerId", wrapper.DeleteContainer)
	router.GET(baseURL+"/containers/:containerId", wrapper.GetContainer)
	router.OPTIONS(baseURL+"/containers/:containerId", wrapper.OptionsContainersGetDelete)
	router.GET(baseURL+"/containers/:containerId/eacl", wrapper.GetContainerEACL)
	router.OPTIONS(baseURL+"/containers/:containerId/eacl", wrapper.OptionsContainersEACL)
	router.PUT(baseURL+"/containers/:containerId/eacl", wrapper.PutContainerEACL)
	router.GET(baseURL+"/get/:containerId/:objectId", wrapper.GetContainerObject)
	router.HEAD(baseURL+"/get/:containerId/:objectId", wrapper.HeadContainerObject)
	router.OPTIONS(baseURL+"/get/:containerId/:objectId", wrapper.OptionsContainerObject)
	router.GET(baseURL+"/get_by_attribute/:containerId/:attrKey/:attrVal", wrapper.GetByAttribute)
	router.HEAD(baseURL+"/get_by_attribute/:containerId/:attrKey/:attrVal", wrapper.HeadByAttribute)
	router.OPTIONS(baseURL+"/get_by_attribute/:containerId/:attrKey/:attrVal", wrapper.OptionsByAttribute)
	router.GET(baseURL+"/network-info", wrapper.GetNetworkInfo)
	router.OPTIONS(baseURL+"/network-info", wrapper.OptionsNetworkInfo)
	router.OPTIONS(baseURL+"/objects", wrapper.OptionsObjectsPut)
	router.PUT(baseURL+"/objects", wrapper.PutObject)
	router.OPTIONS(baseURL+"/objects/:containerId", wrapper.NewOptionsUploadContainerObject)
	router.POST(baseURL+"/objects/:containerId", wrapper.NewUploadContainerObject)
	router.GET(baseURL+"/objects/:containerId/by_attribute/:attrKey/:attrVal", wrapper.NewGetByAttribute)
	router.HEAD(baseURL+"/objects/:containerId/by_attribute/:attrKey/:attrVal", wrapper.NewHeadByAttribute)
	router.OPTIONS(baseURL+"/objects/:containerId/by_attribute/:attrKey/:attrVal", wrapper.NewOptionsByAttribute)
	router.GET(baseURL+"/objects/:containerId/by_id/:objectId", wrapper.NewGetContainerObject)
	router.HEAD(baseURL+"/objects/:containerId/by_id/:objectId", wrapper.NewHeadContainerObject)
	router.OPTIONS(baseURL+"/objects/:containerId/by_id/:objectId", wrapper.NewOptionsContainerObject)
	router.OPTIONS(baseURL+"/objects/:containerId/search", wrapper.OptionsObjectsSearch)
	router.POST(baseURL+"/objects/:containerId/search", wrapper.SearchObjects)
	router.DELETE(baseURL+"/objects/:containerId/:objectId", wrapper.DeleteObject)
	router.GET(baseURL+"/objects/:containerId/:objectId", wrapper.GetObjectInfo)
	router.OPTIONS(baseURL+"/objects/:containerId/:objectId", wrapper.OptionsObjectsGetDelete)
	router.OPTIONS(baseURL+"/upload/:containerId", wrapper.OptionsUploadContainerObject)
	router.POST(baseURL+"/upload/:containerId", wrapper.UploadContainerObject)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
