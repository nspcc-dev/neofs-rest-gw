// Package apiserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apiserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	CookieAuthScopes = "CookieAuth.Scopes"
)

// Defines values for Action.
const (
	ALLOW Action = "ALLOW"
	DENY  Action = "DENY"
)

// Defines values for ErrorType.
const (
	API ErrorType = "API"
	GW  ErrorType = "GW"
)

// Defines values for HeaderType.
const (
	OBJECT  HeaderType = "OBJECT"
	REQUEST HeaderType = "REQUEST"
	SERVICE HeaderType = "SERVICE"
)

// Defines values for MatchType.
const (
	STRINGEQUAL    MatchType = "STRING_EQUAL"
	STRINGNOTEQUAL MatchType = "STRING_NOT_EQUAL"
)

// Defines values for Operation.
const (
	OperationDELETE    Operation = "DELETE"
	OperationGET       Operation = "GET"
	OperationHEAD      Operation = "HEAD"
	OperationPUT       Operation = "PUT"
	OperationRANGE     Operation = "RANGE"
	OperationRANGEHASH Operation = "RANGEHASH"
	OperationSEARCH    Operation = "SEARCH"
)

// Defines values for Role.
const (
	KEYS   Role = "KEYS"
	OTHERS Role = "OTHERS"
	SYSTEM Role = "SYSTEM"
	USER   Role = "USER"
)

// Defines values for SearchMatch.
const (
	MatchCommonPrefix   SearchMatch = "MatchCommonPrefix"
	MatchNotPresent     SearchMatch = "MatchNotPresent"
	MatchStringEqual    SearchMatch = "MatchStringEqual"
	MatchStringNotEqual SearchMatch = "MatchStringNotEqual"
)

// Defines values for TokenType.
const (
	Container TokenType = "container"
	Object    TokenType = "object"
)

// Defines values for Verb.
const (
	VerbDELETE  Verb = "DELETE"
	VerbPUT     Verb = "PUT"
	VerbSETEACL Verb = "SETEACL"
)

// Action Rule execution result action in NeoFS EACL. Either allows or denies access if the rule's filters match.
type Action string

// Address Address of the object in NeoFS.
type Address struct {
	ContainerId string `json:"containerId"`
	ObjectId    string `json:"objectId"`
}

// AddressForUpload Address of the object in NeoFS.
type AddressForUpload struct {
	ContainerId string `json:"container_id"`
	ObjectId    string `json:"object_id"`
}

// Attribute Attribute is a pair of strings that can be attached to a container or an object.
type Attribute struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Balance defines model for Balance.
type Balance struct {
	Address   string `json:"address"`
	Precision uint32 `json:"precision"`
	Value     string `json:"value"`
}

// Bearer Bearer token that is expected to be formed.
type Bearer struct {
	// Container Container session token rule.
	Container *Rule    `json:"container,omitempty"`
	Name      string   `json:"name,omitempty"`
	Object    []Record `json:"object"`
}

// BinaryBearer Bearer token for object operations that is represented in binary form.
type BinaryBearer struct {
	// Token Base64 encoded bearer token.
	Token string `json:"token"`
}

// ContainerInfo Information about container.
type ContainerInfo struct {
	Attributes []Attribute `json:"attributes"`
	BasicAcl   string      `json:"basicAcl"`

	// CannedAcl The friendly name for the basicAcl field.
	CannedAcl       *string `json:"cannedAcl,omitempty"`
	ContainerId     string  `json:"containerId"`
	ContainerName   string  `json:"containerName"`
	OwnerId         string  `json:"ownerId"`
	PlacementPolicy string  `json:"placementPolicy"`
	Version         string  `json:"version"`
}

// ContainerList List of containers info
type ContainerList struct {
	Containers []ContainerInfo `json:"containers"`
	Size       int             `json:"size"`
}

// ContainerPutInfo <p>Request body to create container. To specify container name use appropriate property (name provided in attributes will be ignored).<p>
// <p>To create a container you must provide <code>PlacementPolicy</code> and <code>BasicACL</code>.</p>
//
// <h5>Placement policy</h5>
// <p>Placement policy allows you control where and how the container (and its object) is stored. For example, you want to store 3 copies of every object, so you can use the following policy:</p>
// <pre><code>REP 3</code></pre>
// <p><a href="https://github.com/nspcc-dev/neofs-spec/blob/master/01-arch/02-policy.md">More about policy</a>.</p>
//
// <h5>Basic ACL</h5>
// <p>Basic ACL is a part of the container structure, and it is always created simultaneously with the container. Therefore, it is never subject to any changes. It is a 32-bit integer with a bit field in the following format:</p>
// <p><img src="https://raw.githubusercontent.com/nspcc-dev/neofs-spec/046e623dc2d8134ab2b85fcaf831077d574561a2/01-arch/pic/acl-basic-private.svg" alt="ACL Basic"></p>
//
// <table>
//
//	<thead>
//	    <tr>
//	        <th>Symbol</th>
//	        <th>Meaning</th>
//	        <th>Description</th>
//	    </tr>
//	</thead>
//	<tbody>
//	    <tr>
//	        <td>B</td>
//	        <td>Bearer</td>
//	        <td>Allows using Bear Token ACL rules to replace eACL rules</td>
//	    </tr>
//	    <tr>
//	        <td>U</td>
//	        <td>User</td>
//	        <td>The owner of the container identified by the public key linked to the container</td>
//	    </tr>
//	    <tr>
//	        <td>S</td>
//	        <td>System</td>
//	        <td>Inner Ring and/or container nodes in the current version of network map. IR nodes can only perform <code>GetRangeHash</code>, <code>Head</code>, and <code>Search</code> necessary for data audit. Container nodes can only do things required for the replication.</td>
//	    </tr>
//	    <tr>
//	        <td>O</td>
//	        <td>Others</td>
//	        <td>Clients that do not match any of the categories above</td>
//	    </tr>
//	    <tr>
//	        <td>F</td>
//	        <td>Final</td>
//	        <td>Flag denying Extended ACL. If set, Basic ACL check is final, Extended ACL is ignored</td>
//	    </tr>
//	    <tr>
//	        <td>X</td>
//	        <td>Sticky</td>
//	        <td>Flag denying different owners of the request and the object. If set, object in <code>Put</code> request must have one <code>Owner</code> and be signed with the same signature. If not set, the object must be correct but can be of any owner. The nodes falling for <code>SYSTEM</code> role are exceptions from this rule. For them, the bit is ignored.</td>
//	    </tr>
//	    <tr>
//	        <td>0</td>
//	        <td>Deny</td>
//	        <td>Denies operation of the identified category</td>
//	    </tr>
//	    <tr>
//	        <td>1</td>
//	        <td>Allow</td>
//	        <td>Allows operation of the identified category</td>
//	    </tr>
//	</tbody>
//
// </table>
// <p>To upload objects with a bearer token your container must have Bearer bits set. For example, you can use <code>0x0FBFBFFF</code> or predefined <code>eacl-public-read-write</code> values.</p>
// <p>Also, don't forget to set appropriate eACL to restrict your container.</p>
// <p><a href="https://github.com/nspcc-dev/neofs-spec/blob/master/01-arch/07-acl.md">More about ACL</a>.</p>
type ContainerPutInfo struct {
	Attributes      []Attribute `json:"attributes,omitempty"`
	BasicAcl        string      `json:"basicAcl,omitempty"`
	ContainerName   string      `json:"containerName,omitempty"`
	PlacementPolicy string      `json:"placementPolicy,omitempty"`
}

// Eacl EACL NeoFS table.
type Eacl struct {
	ContainerId string   `json:"containerId"`
	Records     []Record `json:"records"`
}

// ErrorResponse <p>Error response.</p>
// <p>More about NeoFS status code you can find
//
//	<a href="https://github.com/nspcc-dev/neofs-spec/blob/master/20-api-v2/status.md">here</a>.</p>
type ErrorResponse struct {
	Code    uint32 `json:"code,omitempty"`
	Message string `json:"message"`

	// Type Error type. Allow determine source of the error.
	Type ErrorType `json:"type"`
}

// ErrorType Error type. Allow determine source of the error.
type ErrorType string

// Filter Filter in NeoFS EACL to check particular properties of the request or the object.
type Filter struct {
	// HeaderType Enumeration of possible sources of Headers to apply filters in NeoFS EACL.
	HeaderType HeaderType `json:"headerType"`
	Key        string     `json:"key"`

	// MatchType Match type in NeoFS EACL filter.
	MatchType MatchType `json:"matchType"`
	Value     string    `json:"value"`
}

// HeaderType Enumeration of possible sources of Headers to apply filters in NeoFS EACL.
type HeaderType string

// MatchType Match type in NeoFS EACL filter.
type MatchType string

// NetworkInfoOK Network information from NeoFS.
type NetworkInfoOK struct {
	AuditFee                   uint64 `json:"auditFee"`
	ContainerFee               uint64 `json:"containerFee"`
	EpochDuration              uint64 `json:"epochDuration"`
	HomomorphicHashingDisabled bool   `json:"homomorphicHashingDisabled"`
	MaxObjectSize              uint64 `json:"maxObjectSize"`
	NamedContainerFee          uint64 `json:"namedContainerFee"`
	StoragePrice               uint64 `json:"storagePrice"`
	WithdrawalFee              uint64 `json:"withdrawalFee"`
}

// ObjectBaseInfo Basic object information.
type ObjectBaseInfo struct {
	// Address Address of the object in NeoFS.
	Address  Address `json:"address"`
	FilePath *string `json:"filePath,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// ObjectInfo Object information.
type ObjectInfo struct {
	Attributes  []Attribute `json:"attributes"`
	ContainerId string      `json:"containerId"`
	ObjectId    string      `json:"objectId"`

	// ObjectSize Object full payload size
	ObjectSize uint64 `json:"objectSize"`
	OwnerId    string `json:"ownerId"`

	// Payload Base64 encoded object payload
	Payload *string `json:"payload,omitempty"`

	// PayloadSize Payload size in response
	PayloadSize int64 `json:"payloadSize"`
}

// ObjectList List of objects.
type ObjectList struct {
	Objects []ObjectBaseInfo `json:"objects"`
	Size    int              `json:"size"`
}

// ObjectUpload <p>Request body to create object.</p>
// <p>To create an object you must provide <code>containerId</code> and <code>fileName</code>.
// Additionally, you can provide <code>payload</code> (base64 encoded data) and <code>attributes</code>.</p>
//
// <p>Attribute is key-value data that is stored with the object. Key and value must be in UTF-8 format and must not be empty.</p>
//
// <p>Valid attribute:</p>
// <ul>
//
//	<li><code>MyAttribute: 'some value'</code></li>
//
// </ul>
//
// <p>Invalid attribute:</p>
// <ul>
//
//	<li><code>MyAttribute: ''</code></li>
//
// </ul>
//
// <p>Also, you can use this attribute to further object searching.</p>
type ObjectUpload struct {
	Attributes  []Attribute `json:"attributes,omitempty"`
	ContainerId string      `json:"containerId"`
	FileName    string      `json:"fileName"`
	Payload     *string     `json:"payload,omitempty"`
}

// Operation Request's operation type to match in NeoFS EACL if the rule is applicable to a particular request.
type Operation string

// PutContainerOK defines model for PutContainerOK.
type PutContainerOK struct {
	ContainerId string `json:"containerId"`
}

// Record A single NeoFS EACL rule.
type Record struct {
	// Action Rule execution result action in NeoFS EACL. Either allows or denies access if the rule's filters match.
	Action  Action   `json:"action"`
	Filters []Filter `json:"filters"`

	// Operation Request's operation type to match in NeoFS EACL if the rule is applicable to a particular request.
	Operation Operation `json:"operation"`
	Targets   []Target  `json:"targets"`
}

// Role Role for target in EACL.
type Role string

// Rule Container session token rule.
type Rule struct {
	ContainerId *string `json:"containerId,omitempty"`

	// Verb Verb that describes the allowed container operation for token.
	Verb Verb `json:"verb"`
}

// SearchFilter Search filter to find objects.
type SearchFilter struct {
	Key string `json:"key"`

	// Match Search match type.
	Match SearchMatch `json:"match"`
	Value string      `json:"value"`
}

// SearchFilters List of SearchFilter elements.
type SearchFilters struct {
	Filters []SearchFilter `json:"filters"`
}

// SearchMatch Search match type.
type SearchMatch string

// SuccessResponse Success response.
type SuccessResponse struct {
	Success bool `json:"success"`
}

// Target Target to apply the ACL rule. Can be a subject's role class or a list of public keys to match (KEYS role).
type Target struct {
	Keys []string `json:"keys"`

	// Role Role for target in EACL.
	Role Role `json:"role"`
}

// TokenResponse Base64 encoded marshaled token (for container or for object operations).
type TokenResponse struct {
	Name  *string `json:"name,omitempty"`
	Token string  `json:"token"`

	// Type Type of token.
	Type TokenType `json:"type"`
}

// TokenType Type of token.
type TokenType string

// Verb Verb that describes the allowed container operation for token.
type Verb string

// AttrKey defines model for attrKey.
type AttrKey = string

// AttrVal defines model for attrVal.
type AttrVal = string

// ContainerId defines model for containerId.
type ContainerId = string

// FullBearerToken defines model for fullBearerToken.
type FullBearerToken = bool

// ObjectId defines model for objectId.
type ObjectId = string

// SignatureKeyParam defines model for signatureKeyParam.
type SignatureKeyParam = string

// SignatureParam defines model for signatureParam.
type SignatureParam = string

// SignatureScheme defines model for signatureScheme.
type SignatureScheme = bool

// AuthJSONBody defines parameters for Auth.
type AuthJSONBody = []Bearer

// AuthParams defines parameters for Auth.
type AuthParams struct {
	// XBearerOwnerId Owner Id (wallet address) that will sign the token.
	XBearerOwnerId string `json:"X-Bearer-Owner-Id"`

	// XBearerLifetime Token lifetime in epoch.
	XBearerLifetime *int `json:"X-Bearer-Lifetime,omitempty"`

	// XBearerForAllUsers Form token for all users or only for this gate.
	XBearerForAllUsers *bool `json:"X-Bearer-For-All-Users,omitempty"`
}

// FormBinaryBearerParams defines parameters for FormBinaryBearer.
type FormBinaryBearerParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// ListContainersParams defines parameters for ListContainers.
type ListContainersParams struct {
	// OwnerId Base58 encoded owner id.
	OwnerId string `form:"ownerId" json:"ownerId"`

	// Offset The number of containers to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of containers to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutContainerParams defines parameters for PutContainer.
type PutContainerParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// NameScopeGlobal Provide this parameter to register container name in NNS service.
	NameScopeGlobal *bool `form:"name-scope-global,omitempty" json:"name-scope-global,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// DeleteContainerParams defines parameters for DeleteContainer.
type DeleteContainerParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// PutContainerEACLParams defines parameters for PutContainerEACL.
type PutContainerEACLParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// GetContainerObjectParams defines parameters for GetContainerObject.
type GetContainerObjectParams struct {
	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// HeadContainerObjectParams defines parameters for HeadContainerObject.
type HeadContainerObjectParams struct {
	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// GetByAttributeParams defines parameters for GetByAttribute.
type GetByAttributeParams struct {
	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// HeadByAttributeParams defines parameters for HeadByAttribute.
type HeadByAttributeParams struct {
	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// PutObjectParams defines parameters for PutObject.
type PutObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// FullBearer Provided bearer token is final or gate should assemble it using signature.
	FullBearer *FullBearerToken `form:"fullBearer,omitempty" json:"fullBearer,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// NewUploadContainerObjectParams defines parameters for NewUploadContainerObject.
type NewUploadContainerObjectParams struct {
	// XAttributes All attributes are in a JSON-formatted map of key-value pairs, where the key is the
	// attribute name and the value is the attribute value.
	// You can also use the special attribute:
	// - `__NEOFS__EXPIRATION_EPOCH` - specifies the expiration epoch used by NeoFS.
	// This attribute should be used if you are familiar with the NeoFS epoch system.
	// More information can be found here: [NeoFS Specifications](https://github.com/nspcc-dev/neofs-spec/blob/master/01-arch/01-netmap.md).
	// Instead of this attribute you can use one of `X-Neofs-*` headers below.
	XAttributes *string `json:"X-Attributes,omitempty"`

	// XNeofsEXPIRATIONRFC3339 Specifies the expiration time in RFC3339 format. Examples:
	// - "2024-12-31T23:59:59Z" represents the last moment of 2024 in UTC.
	// - "2024-12-31T15:59:59-08:00" represents 3:59 PM on December 31, 2024, Pacific Time.\
	// It will be formatted into the `__NEOFS__EXPIRATION_EPOCH` attribute in the created object.
	XNeofsEXPIRATIONRFC3339 *string `json:"X-Neofs-EXPIRATION_RFC3339,omitempty"`

	// XNeofsEXPIRATIONTIMESTAMP Specifies the exact timestamp of object expiration. It will be formatted into the `__NEOFS__EXPIRATION_EPOCH` attribute in the created object.
	XNeofsEXPIRATIONTIMESTAMP *string `json:"X-Neofs-EXPIRATION_TIMESTAMP,omitempty"`

	// XNeofsEXPIRATIONDURATION Specifies the duration until object expiration in Go's duration format. Examples:
	// - "300s" represents 5 minutes.
	// - "2h45m" represents 2 hours and 45 minutes. \
	// It will be formatted into the `__NEOFS__EXPIRATION_EPOCH` attribute in the created object.
	XNeofsEXPIRATIONDURATION *string `json:"X-Neofs-EXPIRATION_DURATION,omitempty"`
}

// NewGetByAttributeParams defines parameters for NewGetByAttribute.
type NewGetByAttributeParams struct {
	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// NewHeadByAttributeParams defines parameters for NewHeadByAttribute.
type NewHeadByAttributeParams struct {
	// Download Set the Content-Disposition header as attachment in response. This makes the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// NewGetContainerObjectParams defines parameters for NewGetContainerObject.
type NewGetContainerObjectParams struct {
	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// NewHeadContainerObjectParams defines parameters for NewHeadContainerObject.
type NewHeadContainerObjectParams struct {
	// Download Set the Content-Disposition header as attachment in response. This make the browser to download object as file instead of showing it on the page.
	Download *string `form:"download,omitempty" json:"download,omitempty"`
}

// SearchObjectsParams defines parameters for SearchObjects.
type SearchObjectsParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// FullBearer Provided bearer token is final or gate should assemble it using signature.
	FullBearer *FullBearerToken `form:"fullBearer,omitempty" json:"fullBearer,omitempty"`

	// Offset The number of containers to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of containers to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// DeleteObjectParams defines parameters for DeleteObject.
type DeleteObjectParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// FullBearer Provided bearer token is final or gate should assemble it using signature.
	FullBearer *FullBearerToken `form:"fullBearer,omitempty" json:"fullBearer,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// GetObjectInfoParams defines parameters for GetObjectInfo.
type GetObjectInfoParams struct {
	// WalletConnect Use wallet connect signature scheme or native NeoFS signature.
	WalletConnect *SignatureScheme `form:"walletConnect,omitempty" json:"walletConnect,omitempty"`

	// FullBearer Provided bearer token is final or gate should assemble it using signature.
	FullBearer *FullBearerToken `form:"fullBearer,omitempty" json:"fullBearer,omitempty"`

	// RangeOffset Range offset to start reading data.
	RangeOffset *int64 `form:"range-offset,omitempty" json:"range-offset,omitempty"`

	// RangeLength Length of data range.
	RangeLength *int64 `form:"range-length,omitempty" json:"range-length,omitempty"`

	// MaxPayloadSize Max payload size (in bytes) that can be included in the response.
	// If the actual size is greater than this params the payload won't be included in the response.
	MaxPayloadSize *int `form:"max-payload-size,omitempty" json:"max-payload-size,omitempty"`

	// XBearerSignature Base64 encoded signature for bearer token.
	XBearerSignature *SignatureParam `json:"X-Bearer-Signature,omitempty"`

	// XBearerSignatureKey Hex encoded the public part of the key that signed the bearer token.
	XBearerSignatureKey *SignatureKeyParam `json:"X-Bearer-Signature-Key,omitempty"`
}

// UploadContainerObjectMultipartBody defines parameters for UploadContainerObject.
type UploadContainerObjectMultipartBody struct {
	// Payload The file to upload.  If no file is present in this field, any other field name will be accepted, except for an empty one.
	Payload *openapi_types.File `json:"payload,omitempty"`
}

// UploadContainerObjectParams defines parameters for UploadContainerObject.
type UploadContainerObjectParams struct {
	// XAttributeFilename This attribute, in any combination of upper/lower case, will be added to the object as the `FileName` attribute. It will also be returned as the `FileName` attribute in GET/HEAD API calls for the object (/get/{containerId}/{objectId}) and the `name` in POST call search in a container (/objects/{containerId}/search).
	XAttributeFilename *string `json:"X-Attribute-Filename,omitempty"`

	// XAttributeFilepath This attribute, in any combination of upper/lower case, will be added to the object as the `FilePath` attribute. It will also be returned as the `FilePath` attribute in GET/HEAD API calls for the object (/get/{containerId}/{objectId}) or the `filePath` in POST call search in a container (/objects/{containerId}/search).
	XAttributeFilepath *string `json:"X-Attribute-Filepath,omitempty"`
}

// AuthJSONRequestBody defines body for Auth for application/json ContentType.
type AuthJSONRequestBody = AuthJSONBody

// PutObjectJSONRequestBody defines body for PutObject for application/json ContentType.
type PutObjectJSONRequestBody = ObjectUpload

// UploadContainerObjectMultipartRequestBody defines body for UploadContainerObject for multipart/form-data ContentType.
type UploadContainerObjectMultipartRequestBody UploadContainerObjectMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get balance in NeoFS
	// (GET /accounting/balance/{address})
	GetBalance(ctx echo.Context, address string) error

	// (OPTIONS /accounting/balance/{address})
	OptionsBalance(ctx echo.Context, address string) error

	// (OPTIONS /auth)
	OptionsAuth(ctx echo.Context) error
	// Form bearer token to further requests
	// (POST /auth)
	Auth(ctx echo.Context, params AuthParams) error
	// Form binary bearer token
	// (GET /auth/bearer)
	FormBinaryBearer(ctx echo.Context, params FormBinaryBearerParams) error

	// (OPTIONS /auth/bearer)
	OptionsAuthBearer(ctx echo.Context) error
	// Get list of containers
	// (GET /containers)
	ListContainers(ctx echo.Context, params ListContainersParams) error

	// (OPTIONS /containers)
	OptionsContainersPutList(ctx echo.Context) error
	// Create new container in NeoFS
	// (PUT /containers)
	PutContainer(ctx echo.Context, params PutContainerParams) error
	// Delete container by id
	// (DELETE /containers/{containerId})
	DeleteContainer(ctx echo.Context, containerId ContainerId, params DeleteContainerParams) error
	// Get container by id
	// (GET /containers/{containerId})
	GetContainer(ctx echo.Context, containerId ContainerId) error

	// (OPTIONS /containers/{containerId})
	OptionsContainersGetDelete(ctx echo.Context, containerId ContainerId) error
	// Get container EACL by id
	// (GET /containers/{containerId}/eacl)
	GetContainerEACL(ctx echo.Context, containerId ContainerId) error

	// (OPTIONS /containers/{containerId}/eacl)
	OptionsContainersEACL(ctx echo.Context, containerId ContainerId) error
	// Set container EACL by id
	// (PUT /containers/{containerId}/eacl)
	PutContainerEACL(ctx echo.Context, containerId ContainerId, params PutContainerEACLParams) error
	// Get object by container ID and object ID. Also returns custom users' header attributes `X-Attribute-*`. It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section.
	// (GET /get/{containerId}/{objectId})
	GetContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params GetContainerObjectParams) error
	// Get object info (head) by container ID and object ID. Also returns custom users' header attributes `X-Attribute-*`.
	// (HEAD /get/{containerId}/{objectId})
	HeadContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params HeadContainerObjectParams) error

	// (OPTIONS /get/{containerId}/{objectId})
	OptionsContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId) error
	// Find and get an object (payload and attributes) by a specific attribute. If more than one object is found, an arbitrary one will be returned. It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section.
	// (GET /get_by_attribute/{containerId}/{attrKey}/{attrVal})
	GetByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params GetByAttributeParams) error
	// Get object attributes by a specific attribute. If more than one object is found, an arbitrary one will be used to get attributes.
	// (HEAD /get_by_attribute/{containerId}/{attrKey}/{attrVal})
	HeadByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params HeadByAttributeParams) error

	// (OPTIONS /get_by_attribute/{containerId}/{attrKey}/{attrVal})
	OptionsByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal) error
	// Get network settings
	// (GET /network-info)
	GetNetworkInfo(ctx echo.Context) error

	// (OPTIONS /network-info)
	OptionsNetworkInfo(ctx echo.Context) error

	// (OPTIONS /objects)
	OptionsObjectsPut(ctx echo.Context) error
	// Upload object to NeoFS
	// (PUT /objects)
	PutObject(ctx echo.Context, params PutObjectParams) error

	// (OPTIONS /objects/{containerId})
	NewOptionsUploadContainerObject(ctx echo.Context, containerId ContainerId) error
	// Upload object to NeoFS
	// (POST /objects/{containerId})
	NewUploadContainerObject(ctx echo.Context, containerId ContainerId, params NewUploadContainerObjectParams) error
	// Find and get an object (payload and attributes) by a specific attribute. If more than one object is found, an arbitrary one will be returned. It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section. Also, returns custom users' object attributes in header `X-Attributes`.
	// (GET /objects/{containerId}/by_attribute/{attrKey}/{attrVal})
	NewGetByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params NewGetByAttributeParams) error
	// Get object attributes by a specific attribute. If more than one object is found, an arbitrary one will be used to get attributes. Also, returns custom users' object attributes in header `X-Attributes`.
	// (HEAD /objects/{containerId}/by_attribute/{attrKey}/{attrVal})
	NewHeadByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal, params NewHeadByAttributeParams) error

	// (OPTIONS /objects/{containerId}/by_attribute/{attrKey}/{attrVal})
	NewOptionsByAttribute(ctx echo.Context, containerId ContainerId, attrKey AttrKey, attrVal AttrVal) error
	// Get object by container ID and object ID. Also, returns custom users' object attributes in header `X-Attributes`. It returns the MIME type based on headers or object contents, so the actual Content-Type can differ from the list in the "Response content type" section.
	// (GET /objects/{containerId}/by_id/{objectId})
	NewGetContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params NewGetContainerObjectParams) error
	// Get object info (head) by container ID and object ID. Also, returns custom users' object attributes in header `X-Attributes`.
	// (HEAD /objects/{containerId}/by_id/{objectId})
	NewHeadContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params NewHeadContainerObjectParams) error

	// (OPTIONS /objects/{containerId}/by_id/{objectId})
	NewOptionsContainerObject(ctx echo.Context, containerId ContainerId, objectId ObjectId) error

	// (OPTIONS /objects/{containerId}/search)
	OptionsObjectsSearch(ctx echo.Context, containerId string) error
	// Search objects by filters
	// (POST /objects/{containerId}/search)
	SearchObjects(ctx echo.Context, containerId ContainerId, params SearchObjectsParams) error
	// Remove object from NeoFS
	// (DELETE /objects/{containerId}/{objectId})
	DeleteObject(ctx echo.Context, containerId ContainerId, objectId ObjectId, params DeleteObjectParams) error
	// Get object info by address
	// (GET /objects/{containerId}/{objectId})
	GetObjectInfo(ctx echo.Context, containerId ContainerId, objectId ObjectId, params GetObjectInfoParams) error

	// (OPTIONS /objects/{containerId}/{objectId})
	OptionsObjectsGetDelete(ctx echo.Context, containerId ContainerId, objectId ObjectId) error

	// (OPTIONS /upload/{containerId})
	OptionsUploadContainerObject(ctx echo.Context, containerId ContainerId) error
	// Upload object to NeoFS
	// (POST /upload/{containerId})
	UploadContainerObject(ctx echo.Context, containerId ContainerId, params UploadContainerObjectParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBalance(ctx, address)
	return err
}

// OptionsBalance converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsBalance(ctx, address)
	return err
}

// OptionsAuth converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsAuth(ctx)
	return err
}

// Auth converts echo context to params.
func (w *ServerInterfaceWrapper) Auth(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Bearer-Owner-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Owner-Id")]; found {
		var XBearerOwnerId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Owner-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Owner-Id", valueList[0], &XBearerOwnerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Owner-Id: %s", err))
		}

		params.XBearerOwnerId = XBearerOwnerId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Bearer-Owner-Id is required, but not found"))
	}
	// ------------- Optional header parameter "X-Bearer-Lifetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Lifetime")]; found {
		var XBearerLifetime int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Lifetime, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Lifetime", valueList[0], &XBearerLifetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Lifetime: %s", err))
		}

		params.XBearerLifetime = &XBearerLifetime
	}
	// ------------- Optional header parameter "X-Bearer-For-All-Users" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-For-All-Users")]; found {
		var XBearerForAllUsers bool
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-For-All-Users, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-For-All-Users", valueList[0], &XBearerForAllUsers, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-For-All-Users: %s", err))
		}

		params.XBearerForAllUsers = &XBearerForAllUsers
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Auth(ctx, params)
	return err
}

// FormBinaryBearer converts echo context to params.
func (w *ServerInterfaceWrapper) FormBinaryBearer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FormBinaryBearerParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FormBinaryBearer(ctx, params)
	return err
}

// OptionsAuthBearer converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsAuthBearer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsAuthBearer(ctx)
	return err
}

// ListContainers converts echo context to params.
func (w *ServerInterfaceWrapper) ListContainers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListContainersParams
	// ------------- Required query parameter "ownerId" -------------

	err = runtime.BindQueryParameter("form", true, true, "ownerId", ctx.QueryParams(), &params.OwnerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ownerId: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListContainers(ctx, params)
	return err
}

// OptionsContainersPutList converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainersPutList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainersPutList(ctx)
	return err
}

// PutContainer converts echo context to params.
func (w *ServerInterfaceWrapper) PutContainer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutContainerParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "name-scope-global" -------------

	err = runtime.BindQueryParameter("form", true, false, "name-scope-global", ctx.QueryParams(), &params.NameScopeGlobal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name-scope-global: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutContainer(ctx, params)
	return err
}

// DeleteContainer converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteContainerParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContainer(ctx, containerId, params)
	return err
}

// GetContainer converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContainer(ctx, containerId)
	return err
}

// OptionsContainersGetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainersGetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainersGetDelete(ctx, containerId)
	return err
}

// GetContainerEACL converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerEACL(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContainerEACL(ctx, containerId)
	return err
}

// OptionsContainersEACL converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainersEACL(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainersEACL(ctx, containerId)
	return err
}

// PutContainerEACL converts echo context to params.
func (w *ServerInterfaceWrapper) PutContainerEACL(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutContainerEACLParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutContainerEACL(ctx, containerId, params)
	return err
}

// GetContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContainerObjectParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContainerObject(ctx, containerId, objectId, params)
	return err
}

// HeadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) HeadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HeadContainerObjectParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HeadContainerObject(ctx, containerId, objectId, params)
	return err
}

// OptionsContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsContainerObject(ctx, containerId, objectId)
	return err
}

// GetByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) GetByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetByAttributeParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// HeadByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) HeadByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HeadByAttributeParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HeadByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// OptionsByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsByAttribute(ctx, containerId, attrKey, attrVal)
	return err
}

// GetNetworkInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworkInfo(ctx)
	return err
}

// OptionsNetworkInfo converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsNetworkInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsNetworkInfo(ctx)
	return err
}

// OptionsObjectsPut converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsObjectsPut(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsObjectsPut(ctx)
	return err
}

// PutObject converts echo context to params.
func (w *ServerInterfaceWrapper) PutObject(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "fullBearer" -------------

	err = runtime.BindQueryParameter("form", true, false, "fullBearer", ctx.QueryParams(), &params.FullBearer)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fullBearer: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutObject(ctx, params)
	return err
}

// NewOptionsUploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewOptionsUploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewOptionsUploadContainerObject(ctx, containerId)
	return err
}

// NewUploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewUploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewUploadContainerObjectParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Attributes" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Attributes")]; found {
		var XAttributes string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Attributes, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Attributes", valueList[0], &XAttributes, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Attributes: %s", err))
		}

		params.XAttributes = &XAttributes
	}
	// ------------- Optional header parameter "X-Neofs-EXPIRATION_RFC3339" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Neofs-EXPIRATION_RFC3339")]; found {
		var XNeofsEXPIRATIONRFC3339 string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Neofs-EXPIRATION_RFC3339, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Neofs-EXPIRATION_RFC3339", valueList[0], &XNeofsEXPIRATIONRFC3339, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Neofs-EXPIRATION_RFC3339: %s", err))
		}

		params.XNeofsEXPIRATIONRFC3339 = &XNeofsEXPIRATIONRFC3339
	}
	// ------------- Optional header parameter "X-Neofs-EXPIRATION_TIMESTAMP" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Neofs-EXPIRATION_TIMESTAMP")]; found {
		var XNeofsEXPIRATIONTIMESTAMP string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Neofs-EXPIRATION_TIMESTAMP, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Neofs-EXPIRATION_TIMESTAMP", valueList[0], &XNeofsEXPIRATIONTIMESTAMP, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Neofs-EXPIRATION_TIMESTAMP: %s", err))
		}

		params.XNeofsEXPIRATIONTIMESTAMP = &XNeofsEXPIRATIONTIMESTAMP
	}
	// ------------- Optional header parameter "X-Neofs-EXPIRATION_DURATION" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Neofs-EXPIRATION_DURATION")]; found {
		var XNeofsEXPIRATIONDURATION string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Neofs-EXPIRATION_DURATION, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Neofs-EXPIRATION_DURATION", valueList[0], &XNeofsEXPIRATIONDURATION, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Neofs-EXPIRATION_DURATION: %s", err))
		}

		params.XNeofsEXPIRATIONDURATION = &XNeofsEXPIRATIONDURATION
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewUploadContainerObject(ctx, containerId, params)
	return err
}

// NewGetByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) NewGetByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewGetByAttributeParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewGetByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// NewHeadByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) NewHeadByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewHeadByAttributeParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewHeadByAttribute(ctx, containerId, attrKey, attrVal, params)
	return err
}

// NewOptionsByAttribute converts echo context to params.
func (w *ServerInterfaceWrapper) NewOptionsByAttribute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "attrKey" -------------
	var attrKey AttrKey

	err = runtime.BindStyledParameterWithOptions("simple", "attrKey", ctx.Param("attrKey"), &attrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrKey: %s", err))
	}

	// ------------- Path parameter "attrVal" -------------
	var attrVal AttrVal

	err = runtime.BindStyledParameterWithOptions("simple", "attrVal", ctx.Param("attrVal"), &attrVal, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attrVal: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewOptionsByAttribute(ctx, containerId, attrKey, attrVal)
	return err
}

// NewGetContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewGetContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewGetContainerObjectParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewGetContainerObject(ctx, containerId, objectId, params)
	return err
}

// NewHeadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewHeadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NewHeadContainerObjectParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewHeadContainerObject(ctx, containerId, objectId, params)
	return err
}

// NewOptionsContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) NewOptionsContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewOptionsContainerObject(ctx, containerId, objectId)
	return err
}

// OptionsObjectsSearch converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsObjectsSearch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId string

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsObjectsSearch(ctx, containerId)
	return err
}

// SearchObjects converts echo context to params.
func (w *ServerInterfaceWrapper) SearchObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchObjectsParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "fullBearer" -------------

	err = runtime.BindQueryParameter("form", true, false, "fullBearer", ctx.QueryParams(), &params.FullBearer)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fullBearer: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchObjects(ctx, containerId, params)
	return err
}

// DeleteObject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteObjectParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "fullBearer" -------------

	err = runtime.BindQueryParameter("form", true, false, "fullBearer", ctx.QueryParams(), &params.FullBearer)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fullBearer: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteObject(ctx, containerId, objectId, params)
	return err
}

// GetObjectInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectInfoParams
	// ------------- Optional query parameter "walletConnect" -------------

	err = runtime.BindQueryParameter("form", true, false, "walletConnect", ctx.QueryParams(), &params.WalletConnect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletConnect: %s", err))
	}

	// ------------- Optional query parameter "fullBearer" -------------

	err = runtime.BindQueryParameter("form", true, false, "fullBearer", ctx.QueryParams(), &params.FullBearer)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fullBearer: %s", err))
	}

	// ------------- Optional query parameter "range-offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "range-offset", ctx.QueryParams(), &params.RangeOffset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range-offset: %s", err))
	}

	// ------------- Optional query parameter "range-length" -------------

	err = runtime.BindQueryParameter("form", true, false, "range-length", ctx.QueryParams(), &params.RangeLength)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range-length: %s", err))
	}

	// ------------- Optional query parameter "max-payload-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-payload-size", ctx.QueryParams(), &params.MaxPayloadSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-payload-size: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Bearer-Signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature")]; found {
		var XBearerSignature SignatureParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature", valueList[0], &XBearerSignature, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature: %s", err))
		}

		params.XBearerSignature = &XBearerSignature
	}
	// ------------- Optional header parameter "X-Bearer-Signature-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Bearer-Signature-Key")]; found {
		var XBearerSignatureKey SignatureKeyParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Bearer-Signature-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Bearer-Signature-Key", valueList[0], &XBearerSignatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Bearer-Signature-Key: %s", err))
		}

		params.XBearerSignatureKey = &XBearerSignatureKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectInfo(ctx, containerId, objectId, params)
	return err
}

// OptionsObjectsGetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsObjectsGetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId ObjectId

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsObjectsGetDelete(ctx, containerId, objectId)
	return err
}

// OptionsUploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) OptionsUploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OptionsUploadContainerObject(ctx, containerId)
	return err
}

// UploadContainerObject converts echo context to params.
func (w *ServerInterfaceWrapper) UploadContainerObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "containerId" -------------
	var containerId ContainerId

	err = runtime.BindStyledParameterWithOptions("simple", "containerId", ctx.Param("containerId"), &containerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter containerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadContainerObjectParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Attribute-Filename" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Attribute-Filename")]; found {
		var XAttributeFilename string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Attribute-Filename, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Attribute-Filename", valueList[0], &XAttributeFilename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Attribute-Filename: %s", err))
		}

		params.XAttributeFilename = &XAttributeFilename
	}
	// ------------- Optional header parameter "X-Attribute-Filepath" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Attribute-Filepath")]; found {
		var XAttributeFilepath string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Attribute-Filepath, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Attribute-Filepath", valueList[0], &XAttributeFilepath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Attribute-Filepath: %s", err))
		}

		params.XAttributeFilepath = &XAttributeFilepath
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadContainerObject(ctx, containerId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounting/balance/:address", wrapper.GetBalance)
	router.OPTIONS(baseURL+"/accounting/balance/:address", wrapper.OptionsBalance)
	router.OPTIONS(baseURL+"/auth", wrapper.OptionsAuth)
	router.POST(baseURL+"/auth", wrapper.Auth)
	router.GET(baseURL+"/auth/bearer", wrapper.FormBinaryBearer)
	router.OPTIONS(baseURL+"/auth/bearer", wrapper.OptionsAuthBearer)
	router.GET(baseURL+"/containers", wrapper.ListContainers)
	router.OPTIONS(baseURL+"/containers", wrapper.OptionsContainersPutList)
	router.PUT(baseURL+"/containers", wrapper.PutContainer)
	router.DELETE(baseURL+"/containers/:containerId", wrapper.DeleteContainer)
	router.GET(baseURL+"/containers/:containerId", wrapper.GetContainer)
	router.OPTIONS(baseURL+"/containers/:containerId", wrapper.OptionsContainersGetDelete)
	router.GET(baseURL+"/containers/:containerId/eacl", wrapper.GetContainerEACL)
	router.OPTIONS(baseURL+"/containers/:containerId/eacl", wrapper.OptionsContainersEACL)
	router.PUT(baseURL+"/containers/:containerId/eacl", wrapper.PutContainerEACL)
	router.GET(baseURL+"/get/:containerId/:objectId", wrapper.GetContainerObject)
	router.HEAD(baseURL+"/get/:containerId/:objectId", wrapper.HeadContainerObject)
	router.OPTIONS(baseURL+"/get/:containerId/:objectId", wrapper.OptionsContainerObject)
	router.GET(baseURL+"/get_by_attribute/:containerId/:attrKey/:attrVal", wrapper.GetByAttribute)
	router.HEAD(baseURL+"/get_by_attribute/:containerId/:attrKey/:attrVal", wrapper.HeadByAttribute)
	router.OPTIONS(baseURL+"/get_by_attribute/:containerId/:attrKey/:attrVal", wrapper.OptionsByAttribute)
	router.GET(baseURL+"/network-info", wrapper.GetNetworkInfo)
	router.OPTIONS(baseURL+"/network-info", wrapper.OptionsNetworkInfo)
	router.OPTIONS(baseURL+"/objects", wrapper.OptionsObjectsPut)
	router.PUT(baseURL+"/objects", wrapper.PutObject)
	router.OPTIONS(baseURL+"/objects/:containerId", wrapper.NewOptionsUploadContainerObject)
	router.POST(baseURL+"/objects/:containerId", wrapper.NewUploadContainerObject)
	router.GET(baseURL+"/objects/:containerId/by_attribute/:attrKey/:attrVal", wrapper.NewGetByAttribute)
	router.HEAD(baseURL+"/objects/:containerId/by_attribute/:attrKey/:attrVal", wrapper.NewHeadByAttribute)
	router.OPTIONS(baseURL+"/objects/:containerId/by_attribute/:attrKey/:attrVal", wrapper.NewOptionsByAttribute)
	router.GET(baseURL+"/objects/:containerId/by_id/:objectId", wrapper.NewGetContainerObject)
	router.HEAD(baseURL+"/objects/:containerId/by_id/:objectId", wrapper.NewHeadContainerObject)
	router.OPTIONS(baseURL+"/objects/:containerId/by_id/:objectId", wrapper.NewOptionsContainerObject)
	router.OPTIONS(baseURL+"/objects/:containerId/search", wrapper.OptionsObjectsSearch)
	router.POST(baseURL+"/objects/:containerId/search", wrapper.SearchObjects)
	router.DELETE(baseURL+"/objects/:containerId/:objectId", wrapper.DeleteObject)
	router.GET(baseURL+"/objects/:containerId/:objectId", wrapper.GetObjectInfo)
	router.OPTIONS(baseURL+"/objects/:containerId/:objectId", wrapper.OptionsObjectsGetDelete)
	router.OPTIONS(baseURL+"/upload/:containerId", wrapper.OptionsUploadContainerObject)
	router.POST(baseURL+"/upload/:containerId", wrapper.UploadContainerObject)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8bpRv2saDx8f/i8AAP//rRK6wejPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
